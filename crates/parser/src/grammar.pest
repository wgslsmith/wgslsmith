WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT    = _{ "//" ~ (!NEWLINE ~ ANY)* }

ident = @{
    (ASCII_ALPHA | "_") ~ ASCII_ALPHANUMERIC ~ (ASCII_ALPHANUMERIC | "_")* | ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")*
}

// LITERALS

bool_literal = { "true" | "false" }
uint_literal = @{ ASCII_DIGIT+ ~ "u" }
int_literal  = @{ ("-")? ~ ASCII_DIGIT+ ~ "i"? ~ !"u" | "i32(" ~ ("-")? ~ ASCII_DIGIT+ ~ ")"}
float_literal = @{ ("-")? ~ ASCII_DIGIT* ~ "." ~ ASCII_DIGIT+ ~ "f"? | ("-")? ~ ASCII_DIGIT+ ~ "f"}

// TYPES

t_bool = { "bool" }
t_i32  = { "i32" }
t_u32  = { "u32" }
t_f32  = { "f32" }

t_vec2 = { "vec2<" ~ t_scalar ~ ">" }
t_vec3 = { "vec3<" ~ t_scalar ~ ">" }
t_vec4 = { "vec4<" ~ t_scalar ~ ">" }

t_scalar = { t_bool | t_i32 | t_u32 | t_f32 }
t_vector = { t_vec2 | t_vec3 | t_vec4 }

array_type_decl = { "array" ~ "<" ~ type_decl ~ ("," ~ int_literal)? ~ ">" }
ptr_type_decl   = { "ptr" ~ "<" ~ storage_class ~ "," ~ type_decl ~ ("," ~ access_mode)? ~ ">" }

type_decl          = { t_scalar | t_vector | array_type_decl | ptr_type_decl | ident }
built_in_type_decl = { t_scalar | t_vector | array_type_decl }

// OPERATORS

op_plus         = { "+" }
op_minus        = { "-" }
op_times        = { "*" }
op_divide       = { "/" }
op_mod          = { "%" }
op_log_and      = { "&&" }
op_log_or       = { "||" }
op_log_not      = { "!" }
op_bit_and      = { "&" }
op_bit_or       = { "|" }
op_bit_xor      = { "^" }
op_bit_not      = { "~" }
op_lshift       = { "<<" }
op_rshift       = { ">>" }
op_equal        = { "==" }
op_nequal       = { "!=" }
op_less         = { "<" }
op_less_eq      = { "<="}
op_greater      = { ">" }
op_greater_eq   = { ">=" }
op_assign       = { "=" }
op_plus_equal   = { "+=" }
op_minus_equal  = { "-= "}
op_times_equal  = { "*=" }
op_divide_equal = { "/=" }
op_mod_equal    = { "%=" }
op_and_equal    = { "&=" }
op_or_equal     = { "|=" }
op_xor_equal    = { "^=" }
op_address_of   = { "&" }
op_indirection  = { "*" }

assignment_operator          = { op_assign | compound_assignment_operator }
compound_assignment_operator = {
    op_plus_equal | op_minus_equal |
    op_times_equal | op_divide_equal | op_mod_equal |
    op_and_equal | op_or_equal | op_xor_equal
}

unary_operator  = _{ op_minus | op_log_not | op_bit_not | op_address_of | op_indirection }
binary_operator = _{
    op_plus | op_minus | op_times | op_divide | op_mod |
    op_log_and | op_log_or |
    op_bit_and | op_bit_or | op_bit_xor |
    op_lshift | op_rshift |
    op_equal | op_nequal | op_less_eq | op_less | op_greater_eq | op_greater
}

// EXPRESSIONS

literal_expression   = { bool_literal | float_literal | uint_literal | int_literal }
type_cons_expression = { built_in_type_decl ~ argument_list }
call_expression      = { ident ~ argument_list }
var_expression       = { ident }
paren_expression     = { "(" ~ expression ~ ")" }

argument_list       = _{ "(" ~ ((expression ~ ",")* ~ expression ~ ","?)? ~ ")" }
unary_expression    = { singular_expression | unary_operator ~ unary_expression }
singular_expression = { primary_expression ~ postfix_expression* }
postfix_expression  = { "[" ~ expression ~ "]" | "." ~ ident }
infix_expression    = { unary_expression ~ (binary_operator ~ unary_expression)+ }
primary_expression  = {
    literal_expression |
    type_cons_expression |
    call_expression |
    var_expression |
    paren_expression
}

expression = { infix_expression | unary_expression }

core_lhs_expression = { ident | "(" ~ lhs_expression ~ ")" }
lhs_expression      = { (op_address_of | op_indirection)* ~ core_lhs_expression ~ postfix_expression* }
lhs_phony           = { "_" }

// STATEMENTS

var_statement        = { "var" ~ ident ~ (":" ~ type_decl)? ~ ("=" ~ expression)? }
let_statement        = { "let" ~ ident ~ (":" ~ type_decl)? ~ "=" ~ expression }
assignment_statement = { (lhs_phony | lhs_expression) ~ assignment_operator ~ expression }
compound_statement   = { "{" ~ statement* ~ "}" }
if_statement         = { "if" ~ paren_expression ~ compound_statement ~ ("else" ~ (compound_statement | if_statement))? }
return_statement     = { "return" ~ expression? }
loop_statement       = { "loop" ~ compound_statement }
break_statement      = { "break" }
continue_statement   = { "continue" }
fallthrough_statement = { "fallthrough" }
call_statement       = { call_expression }

switch_statement = { "switch" ~ expression ~ "{" ~ switch_case+ ~ "}" }
switch_case      = {
    "case" ~ expression ~ ":"? ~ compound_statement |
    "default" ~ ":"? ~ compound_statement
}

for_statement = { "for" ~ "(" ~ for_init? ~ ";" ~ expression? ~ ";" ~ for_update? ~ ")" ~ compound_statement }
for_init      = { var_statement }
for_update    = { assignment_statement }

statement = {
    assignment_statement ~ ";" |
    var_statement ~ ";" |
    let_statement ~ ";" |
    if_statement |
    loop_statement |
    return_statement ~ ";" |
    break_statement ~ ";" |
    compound_statement |
    switch_statement |
    for_statement |
    call_statement ~ ";" |
    continue_statement ~ ";" |
    fallthrough_statement ~ ";"
}

// ATTRIBUTES

attribute_list   = { "[[" ~ (attribute ~ ",")* ~ attribute ~ "]]" | "@" ~ attribute }
attribute        = { ident ~ ("(" ~ (literal_or_ident ~ ",")* ~ literal_or_ident ~ ")")? }
literal_or_ident = _{ literal_expression | ident }

// FUNCTIONS

function_decl   = { attribute_list* ~ function_header ~ compound_statement }
function_header = _{ "fn" ~ ident ~ param_list ~ ("->" ~ type_decl)? }
param_list      = _{ "(" ~ ((param ~ ",")* ~ param ~ ","?)? ~ ")" }
param           = { ident ~ ":" ~ type_decl }

// GLOBALS

global_constant_decl = { ("let" | "const") ~ ident ~ (":" ~ type_decl)? ~ "=" ~ expression }
global_variable_decl = { attribute_list* ~ "var" ~ variable_qualifier? ~ ident ~ (":" ~ type_decl)? ~ ("=" ~ expression)? }
variable_qualifier   = { "<" ~ storage_class ~ ("," ~ access_mode)? ~ ">" }
storage_class        = { "function" | "private" | "workgroup" | "uniform" | "storage" }
access_mode          = { "read_write" | "read" | "write" }

struct_decl   = { "struct" ~ ident ~ "{" ~ struct_member* ~  "}" }
struct_member = { attribute_list* ~ ident ~ ":" ~ type_decl ~ (";" | ",") }

global_decl = {
    global_constant_decl ~ ";" |
    global_variable_decl ~ ";" |
    struct_decl ~ ";"? |
    function_decl
}

translation_unit = { SOI ~ global_decl* ~ EOI }
